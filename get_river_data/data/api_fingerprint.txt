function DateToUnixTime(dateParameter)
{
    return Math.round( (new Date( dateParameter ).getTime()) / 1000 );
}

var RiverState = {
    Error: "0",
    Steady: "1",
    Rising: "2",
    Falling: "3",
};

var DataType = {
    SepaRiverLevelGauge: "1",
    NOCTidalPredictions: "2",
    EARiverLevelGauge: "3",
    EATidalLevelGauge: "4",
    EAReservoirLevelGauge: "5",
    EARainfallGauge: "6",
    EABoreholeData: "7",
    EARiverTemperature: "8",
    EAAirTemperature: "9",
    MetOfficeObservations: "10",
    MetOfficeForecast: "11",
    EAFlowAbstraction: "12",
    EAFlowItem1: "13",
    EAFlowItem2: "14",
    EAFlowLogged: "15",
    EAFlowSpeed: "16",
    EAFlowStage: "17",
    EAFlowWater: "18",
    EAGatePositionItem1: "19",
    EAGatePositionItem2: "20",
    EAGatePositionItem3: "21",
    EAGatePositionLogged: "22",
    EAGatePositionStage: "23",
    EARainfallItem15: "24",
    EAWaterLevelAbstraction: "25",
    EAWaterLevelCrestTapping: "26",
    EAWaterLevelDownstreamStage: "27",
    EAWaterLevelHeight: "28",
    EAWaterLevelItem1: "29",
    EAWaterLevelItem2: "30",
    EAWaterLevelItem3: "31",
    EAWaterLevelItem4: "32",
    EAWaterLevelLogged: "33",
    EAWaterLevelSumpLevel: "34",
    EAWaterLevelWater: "35",
    EAWindDirection: "36",
    EAWindSpeed: "37",
    EAStateItem4: "38",
    OPWOrdnanceDatum: "39",
    OPWWaterLevel: "40",
    OPWTemperature: "41",
    OPWVoltage: "42",
    OPWRainFall15: "43",
    FDCamera: "44",
    EARainfallItem2: "45"
};

var shoothillWeather = (function () {
    var _api = {},
        _apiBaseUrl = "https://riverlevelsapi.azurewebsites.net/",
        _sessionHeaderId = "208af46f-05a2-4b1a-9690-ce6d6205ab45";

    _api.MetOfficeService = {};
    _api.HydroMetricService = {};
    _api.TimeSeriesService = {};
    _api.ThreeDayFloodForecastService = {};

    if (jQuery === undefined) {
        throw "Error, API Depends on jQuery, ensure that the call to this script tag is below the jquery script";
    }

    _api.GetAPIBaseUrl = function() {
        return _apiBaseUrl;
    }

    _api.TimeSeriesService.GetTimeSeriesStations = function ( dataTypes, success, failure) {
        var parameters = {};
        parameters.dataTypes = dataTypes;
        MakeAjaxCall(_apiBaseUrl + "TimeSeries/GetTimeSeriesStations/", success, failure, parameters);
    }

    _api.TimeSeriesService.GetRiverNames = function (success, failure) {
        MakeAjaxCall(_apiBaseUrl + "TimeSeries/GetRiverNames/", success, failure);
    }

    _api.TimeSeriesService.GetCatchmentNames = function (success, failure) {
        MakeAjaxCall(_apiBaseUrl + "TimeSeries/GetCatchmentNames/", success, failure);
    }

    _api.TimeSeriesService.GetTimeSeriesStationSummary = function (success, failure) {
        MakeAjaxCall(_apiBaseUrl + "TimeSeries/GetTimeSeriesStationSummary/", success, failure);
    }

    _api.TimeSeriesService.GetRiverGroupings = function (success, failure) {
        MakeAjaxCall(_apiBaseUrl + "TimeSeries/GetRiverGroupings/", success, failure);
    }

    _api.TimeSeriesService.GetTimeSeriesStationsByRiverName = function (riverName, success, failure) {
        var parameters = {};
        parameters.riverName = riverName;

        MakeAjaxCall(_apiBaseUrl + "TimeSeries/GetTimeSeriesStationsByRiverName/", success, failure, parameters);
    }

    _api.TimeSeriesService.GetTimeSeriesStationsByCatchmentName = function (catchmentName, success, failure) {
        var parameters = {};
        parameters.catchmentName = catchmentName;

        MakeAjaxCall(_apiBaseUrl + "TimeSeries/GetTimeSeriesStationsByCatchmentName/", success, failure, parameters);
    }

    _api.TimeSeriesService.GetTimeSeriesStationsByRiverGroupingKey = function (riverGroupingKey, success, failure) {
        var parameters = {};
        parameters.riverGroupingKey = riverGroupingKey;

        MakeAjaxCall(_apiBaseUrl + "TimeSeries/GetTimeSeriesStationsByRiverGroupingKey/", success, failure, parameters);
    }

    _api.TimeSeriesService.GetTimeSeriesStationById = function (stationId, success, failure) {
        var parameters = {};
        parameters.stationId = stationId;

        MakeAjaxCall(_apiBaseUrl + "TimeSeries/GetTimeSeriesStationById/", success, failure, parameters);
    }

    _api.TimeSeriesService.GetNearestTimeSeriesStations = function (dataTypes, latitude, longitude, count, success, failure) {
        var parameters = {};
        parameters.dataTypes = dataTypes;
        parameters.latitude = latitude;
        parameters.longitude = longitude;
        parameters.count = count;

        MakeAjaxCall(_apiBaseUrl + "TimeSeries/GetNearestTimeSeriesStations/", success, failure, parameters);
    };

    _api.TimeSeriesService.GetTimeSeriesDatapoints = function (stationId, dataType, count, success, failure) {
        var parameters = {};
        parameters.stationId = stationId;
        parameters.dataType = dataType;
        parameters.numberDays = count;

        MakeAjaxCall(_apiBaseUrl + "TimeSeries/GetTimeSeriesRecentDatapoints/", success, failure, parameters);
    };

    _api.TimeSeriesService.GetTimeSeriesAggregatedDatapoints = function (stationId, dataType, numberDays, groupingPeriodType, groupingPeriodValue, success, failure) {
        var parameters = {};
        parameters.stationId = stationId;
        parameters.dataType = dataType;
        parameters.numberDays = numberDays;
        parameters.groupingPeriodType = groupingPeriodType;
        parameters.groupingPeriodValue = groupingPeriodValue;

        MakeAjaxCall(_apiBaseUrl + "TimeSeries/GetTimeSeriesAggregatedDatapoints/", success, failure, parameters);
    };

    _api.TimeSeriesService.GetTimeSeriesDatapointsDateTimeWithSmoothing = function (stationId, dataType, startTime, endTime, smoothing, success, failure) {
        var parameters = {};
        parameters.stationId = stationId;
        parameters.dataType = dataType;
        parameters.endTime = endTime;
        parameters.startTime = startTime;
        parameters.smoothing = smoothing;

        MakeAjaxCall(_apiBaseUrl + "TimeSeries/GetTimeSeriesDatapointsDateTime/", success, failure, parameters);
    };

    _api.TimeSeriesService.GetTimeSeriesDatapointsDateTime = function (stationId, dataType, startTime, endTime, success, failure) {
        var parameters = {};
        parameters.stationId = stationId;
        parameters.dataType = dataType;
        parameters.endTime = endTime;
        parameters.startTime = startTime;

        MakeAjaxCall(_apiBaseUrl + "TimeSeries/GetTimeSeriesDatapointsDateTime/", success, failure, parameters);
    };

    _api.TimeSeriesService.GetTimeSeriesAggregatedDatapointsDateTime = function (stationId, dataType, endTime, startTime, groupingPeriodType, groupingPeriodValue, success, failure) {
        var parameters = {};
        parameters.stationId = stationId;
        parameters.dataType = dataType;
        parameters.endTime = endTime;
        parameters.startTime = startTime;
        parameters.groupingPeriodType = groupingPeriodType;
        parameters.groupingPeriodValue = groupingPeriodValue;

        MakeAjaxCall(_apiBaseUrl + "TimeSeries/GetTimeSeriesAggregatedDatapointsDateTime/", success, failure, parameters);
    };

    ///
    /// Get The Water Level Statistics
    ///
    _api.TimeSeriesService.GetWaterLevelStatistics = function (success, failure) {
        MakeAjaxCall(_apiBaseUrl + "TimeSeries/GetWaterLevelStatistics/", success, failure);
    };

    _api.TimeSeriesService.GetGeoEntityDataTypeStatistics = function (success, failure) {
        MakeAjaxCall(_apiBaseUrl + "TimeSeries/GetGeoEntityDataTypeStatistics/", success, failure);
    };

    ///
    /// Get Water Level Statistics For Statistic Type
    ///
    _api.TimeSeriesService.GetWaterLevelStatisticsForType = function (type, success, failure) {
        var parameters = {};
        parameters.type = type;

        MakeAjaxCall(_apiBaseUrl + "TimeSeries/GetWaterLevelStatisticsForType/", success, failure, parameters);
    };

    ///
    /// Get The Geo Entity Water Level Statistics
    ///
    _api.TimeSeriesService.GetGeoEntityWaterLevelStatistics = function (success, failure) {
        MakeAjaxCall(_apiBaseUrl + "TimeSeries/GetGeoEntityWaterLevelStatistics/", success, failure);
    };

    ///
    /// Get Most Active Gauge
    ///
    _api.TimeSeriesService.GetMostActiveGauge = function (success, failure) {
        MakeAjaxCall(_apiBaseUrl + "TimeSeries/GetMostActiveGauge/", success, failure);
    };

    /// <summary>
    /// Get the current three day flood forecast
    /// </summary>
    _api.ThreeDayFloodForecastService.GetCurrentForecast = function (success, failure) {
        MakeAjaxCall(_apiBaseUrl + "ThreeDayFloodForecast/GetCurrentForecast/", success, failure);
    }

    /// <summary>
    /// Filter current three day flood forecast by the supplied list of risk levels
    /// </summary>
    _api.ThreeDayFloodForecastService.GetCurrentForecastByRiskTypes = function ( riskList, success, failure) {
        var parameters = new Object();
        parameters.riskList = encodeURIComponent( riskList.join(",") );
        MakeAjaxCall(_apiBaseUrl + "ThreeDayFloodForecast/GetCurrentForecastByRiskTypes/", success, failure, parameters);
    }

    /// <summary>
    /// Filter current three day flood forecast by the supplied list of regions 
    /// </summary>
    _api.ThreeDayFloodForecastService.GetCurrentForecastByRegions = function ( regionList, success, failure) {
        var parameters = {};
        parameters.regionList = encodeURIComponent(regionList.join(","));

        MakeAjaxCall(_apiBaseUrl + "ThreeDayFloodForecast/GetCurrentForecastByRegions/", success, failure, parameters);
    }

    function MakeAjaxCall(urlString, success, failure, parameters) {
        var returnObject = {
            success: null,
            data: null
        };

        var hasQueryParameters = false;

        if ($.support.cors) {
            $.ajax({
                url: urlString,
                type: "GET",
                dataType: "json",
                data: parameters,
                crossDomain: true,
                beforeSend: function (xhrObj) {
                    xhrObj.setRequestHeader("SessionHeaderId", _sessionHeaderId);
                },
                success: function (data) {
                    returnObject.success = true;
                    returnObject.data = data;

                    success(returnObject);
                },
                error: function (jqXHR, textStatus) {
                    returnObject.success = false;
                    returnObject.status = textStatus;
                    returnObject.data = jqXHR;

                    failure(returnObject);
                }
            });
        } else {
            var tokenParameter = ((hasQueryParameters) ? "&" : "?") + "SessionHeaderId=" + _sessionHeaderId;
            urlString += tokenParameter;

            $.ajax({
                url: urlString,
                dataType: "jsonp",
                data: parameters,
                success: function (data) {
                    returnObject.success = true;
                    returnObject.data = data;

                    success(returnObject);
                },
                error: function (jqXHR, textStatus) {
                    returnObject.success = false;
                    returnObject.status = textStatus;
                    returnObject.data = jqXHR;

                    failure(returnObject);
                }
            });
        }
    }

    return _api;
})();


https://riverlevelsapi.azurewebsites.net/Kml/StationsJSON?appID=GaugeMap

